// <auto-generated />
using System;
using EFCoreModelsAndRelationships.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreModelsAndRelationships.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190328151947_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.Author", b =>
                {
                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("ImageUrl");

                    b.HasKey("FirstName", "LastName");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.Book", b =>
                {
                    b.Property<int>("ISBN");

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<string>("imgurl")
                        .IsRequired();

                    b.Property<int>("price");

                    b.Property<DateTime>("publishedOn");

                    b.Property<string>("title")
                        .IsRequired();

                    b.HasKey("ISBN");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.BookAuthor", b =>
                {
                    b.Property<int>("BookAuhtorId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("ISBN");

                    b.HasKey("BookAuhtorId", "FirstName", "LastName");

                    b.HasIndex("ISBN");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.PriceOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookISBN");

                    b.Property<int>("ISBN");

                    b.Property<int>("NewPrice");

                    b.Property<string>("PromotionText");

                    b.HasKey("Id");

                    b.HasIndex("BookISBN");

                    b.ToTable("PriceOffers");
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ISBN");

                    b.Property<int>("NumStars");

                    b.Property<string>("VoterName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ISBN");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.BookAuthor", b =>
                {
                    b.HasOne("EFCoreModelsAndRelationships.Model.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EFCoreModelsAndRelationships.Model.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("FirstName", "LastName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.PriceOffer", b =>
                {
                    b.HasOne("EFCoreModelsAndRelationships.Model.Book", "Book")
                        .WithMany("PriceOffers")
                        .HasForeignKey("BookISBN")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreModelsAndRelationships.Model.Review", b =>
                {
                    b.HasOne("EFCoreModelsAndRelationships.Model.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
